// strtok, memset seen in K&R, page 250.
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

// Flags
int r = 0;
int j = 0;
int s = 0;
int w = 0;

int line_w = 72;

void help() {
    printf("Usage: ./format <optional flags> \n\
            Flags:\n\
            \t -w # \t : Change the max. line (w)idth (specify a number between 1 - 1000).\n\
            \t -r \t : (R)ight-align text. \n\
            \t -j \t : (J)ustify-align text. \n\
            \t -s \t : (S)kip multiple blank lines.\n");
    exit(1);
}


void check_args(int argc, char *argv[]) {
    for (int i = 1; i < argc; i++) {
        if (strcmp("-w", argv[i]) == 0) {
            if (i < (argc - 1)) {
                if (isdigit(*argv[i + 1])) {
                    line_w = atoi(argv[++i]);
                    if (line_w < 1 || line_w > 1000) {
                        help();
                    }
                } else {
                    help();
                }
            } else {
                help();
            }
        } else if ((strcmp("-r", argv[i]) == 0)) {
            if (j == 0) {
                r = 1;
            } else {
                printf("Whoops, you can't have right alignment turned on too!\n");
                help();
            }
        } else if (strcmp("-j", argv[i]) == 0) {
            if (r == 0) {
                j = 1;
            } else {
                printf("Whoops, you can't have justified alignment turned on too!\n");
                help();
            }
        } else if (strcmp("-s", argv[i]) == 0) {
            s = 1;
        } else if (strcmp("-?", argv[i]) == 0 || strcmp("-h", argv[i]) == 0) {
            help();
        } else {
            help();
        }
    }
}

void print_lines() {
    char word[100];
    char line[1000];
    char c = 0;
    int line_l = 0;
    int word_l = 0;
    int gaps = 0;

    c = fscanf(stdin, "%s" , word);
    while (c != EOF) {
        word_l = strlen(word);
        if ((line_l + word_l) <= line_w) {
            strcat(line, strcat(word, " "));
            gaps++;
            line_l += word_l + 1;
            printf("%s", word);
        } else {
            if (0 != r) {
                do {
                    printf("\r");
                } while (0 == r);
                int spaces = line_w - line_l;
                for (int i = 0; i <= spaces; i++) {
                    printf(" ");
                }
                printf("%s", line);
            }

            if (0 != j) {
                char * next_word;
                int extra_spaces = line_w - line_l;
                int spaces_seen;
                int spaces_printed = 1;
                int g = 1;
                printf("\r");
                /* printf ("Splitting string \"%s\" into tokens:\n------\n", line); */
                next_word = strtok (line," ");
                while (next_word != NULL) {
                    /* printf("length: %lu", strlen(next_word)); */
                    printf ("%s",next_word);
                    // print justified spaces
                    spaces_seen = (int) ceil((g * extra_spaces) / gaps);
                    /* printf("\nSeen: %d\n", spaces_seen); */
                    for ( ; spaces_printed <= spaces_seen; spaces_printed++) {
                        /* printf("Spaces Printed:%d", spaces_printed); */
                        printf(" ");
                    }
                    spaces_printed--;
                    /* printf("\nPrinted: %d\n", spaces_printed); */
                    g++;
                    next_word = strtok (NULL, " ");
                }
            }

            memset(line, 0, sizeof(char));
            strcat(line, strcat(word, " "));
            gaps++;
            line_l = word_l + 1;
            printf("\n%s", word);
        }

        int ch = getchar();
        int nextch = 0;

        while(ch == '\n') {
            if ((nextch= getchar()) == '\n') {
                if (0 != r) {
                    do {
                        printf("\r");
                    } while (0 == r);
                    int spaces = line_w - line_l;
                    for (int i = 0; i <= spaces; i++) {
                        printf(" ");
                    }
                    printf("%s", line);
                }
                printf("\n\n");
                ch = getchar();
                while(ch == '\n') {
                    if (s != 1) {
                        printf("%c", ch);
                    }
                    ch = getchar();
                }
                memset(line, 0, sizeof(char));
                line_l= 0;
            }
            ch = getchar();
        }
        ungetc(ch, stdin);
        c = fscanf(stdin, "%s" , word);
    }
    if (0 != r) {
        do {
            printf("\r");
        } while (0 == r);
        int spaces = line_w - line_l;
        for (int i = 0; i <= spaces; i++) {
            printf(" ");
        }
        printf("%s", line);
    }
}

int main(int argc, char *argv[]) {
    check_args(argc, argv);
    print_lines();
    return 0;
}
