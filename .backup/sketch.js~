var // Global variables
bg = 150,
keys = [38],
jump = (keys[32] || keys[38]),
left = keys[37],
right = keys[39],
player,
myWidth = 800,
myHeight = myWidth - 200;
ground  = myHeight - 50;
friction = 0.9,
gravity = 3,
boxes = [];

boxes.push({
    width: 10,
    height: myHeight,
    x: 0,
    y: 0
}, {
    width: 800,
    height: 50,
    x: 0,
    y: ground + 20
}, {
    width: 50,
    height: 50,
    x: myWidth/2,
    y: myHeight/2 + 220
}, {
    width: 10,
    height: myHeight,
    x: myWidth - 10,
    y: 0
});

var dir;
function drawBoxes() {
    for (var i = 0; i < boxes.length; i++) {
        rect(boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);

        dir = collisionCheck(player, boxes[i]);

        if (dir === "l" || dir === "r") {
            player.velocity.x = 0;
            player.jumping = false;
        } else if (dir === "b") {
            player.grounded = true;
            player.jumping = false;
        } else if (dir === "t") {
            player.velocity.y *= -1;
        }

    }
}

function setup() {
    createCanvas(myWidth, myHeight);
    background(bg);
    fill(0);
    stroke(1);
    player = new Entity(10, 10, width/5, myHeight/2);
}

function draw() {
    background(bg);
    // drawBoxes();
    player.update();
}

function Entity(width, height, startingX, startingY) {
    this.width = width;
    this.height = height;
    this.x = startingX;
    this.y = startingY;
    this.speed = 15;
    this.velocity = createVector(0, 0);
    this.color = 255;
    this.jumping = false;
    this.grounded = false;
    this.doubleJumping = false;


    this.update2 = function() {
        // check keys
        if (keys[38] || keys[32]) {
            // up arrow or space
            if (!player.jumping && player.grounded) {
                player.jumping = true;
                player.grounded = false;
                player.velocity.y = -player.speed * 2;
            }
        }
        if (keys[39]) {
            // right arrow
            if (player.velocity.x < player.speed) {
                player.velocity.x++;
            }
        }
        if (keys[37]) {
            // left arrow
            if (player.velocity.x > -player.speed) {
                player.velocity.x--;
            }
        }

        player.velocity.x *= friction;
        player.velocity.y += gravity;

        player.grounded = false;
        drawBoxes()

        if(player.grounded){
            player.velocity.y = 0;
        }

        player.x += player.velocity.x;
        player.y += player.velocity.y;

        debug();
        fill(this.color);
        rect(this.x, this.y, this.width, this.height);
    }

    this.update = function() {
        debug();
        fill(this.color);
        rect(this.x, this.y, this.width, this.height);

        // Check for movement with the keys array
        if (keys[37]) {
            if (player.velocity.x <= player.speed) {
                player.velocity.x--;
            }
        } else if (keys[39]) {
            if (player.velocity.x <= player.speed) {
                player.velocity.x++;
            }
        } else if (keys[32] || keys[38]) {
            if (!player.jumping && !player.doubleJumping && !player.grounded){
                player.grounded = false;
                player.velocity.y = -player.speed * 1.1;
                setTimeout(function(){
                    player.jumping = true;
                }, 350);
            } else if (player.jumping && !player.doubleJumping) {
                player.doubleJumping = true;
                player.velocity.y = -player.speed * 0.8;
            }
        }

        player.x += player.velocity.x;
        player.y += player.velocity.y;

        // Limit the player's speed
        if (player.velocity.x > player.speed) {
            player.velocity.x--;
        } else if (player.velocity.x < -player.speed) {
            player.velocity.x++;
        }

        player.velocity.x *= friction;
        player.velocity.y += gravity;

        // Update player speed with the processed keys
        player.x += player.velocity.x;
        player.y += player.velocity.y;

        // Check to make sure player doesn't go off the screen
        if (player.x >= myWidth) {
            player.x = myWidth;
            player.velocity.x = 0;
        } else if (player.x <= 0) {
            player.velocity.x = 0;
            player.x = 0;
        }

        if(player.y > myHeight - player.height){
            player.y = myHeight - player.height;
            player.velocity.y = 0;
            player.jumping = false;
            player.doubleJumping = false;
        } else if(player.y < 0){
            jumps = 0;
            player.y = 0;
            player.velocity.y = 0;
        }
    }
}


function debug() {
    var textX = textY = 40,
    lineHeight = 15,
    messages = [];

    messages.push("player.x: " + player.x + " player.y: " + player.y);
    messages.push("player.velocity.x: " + player.velocity.x + " player.velocity.y: " + player.velocity.y);
    messages.push("player.jumping: " + player.jumping);
    messages.push("player.doubleJumping: " + player.doubleJumping);
    messages.push("player.grounded: " + player.grounded);

    for (var i  = 0; i < messages.length; i++) {
        text(messages[i], textX, textY + lineHeight * i);
    }
}

function collisionCheck(shapeA, shapeB) {
    // get the vectors to check against
    var vX = (shapeA.x + (shapeA.width / 2)) - (shapeB.x + (shapeB.width / 2)),
    vY = (shapeA.y + (shapeA.height / 2)) - (shapeB.y + (shapeB.height / 2)),
    // add the half widths and half heights of the objects
    hWidths = (shapeA.width / 2) + (shapeB.width / 2),
    hHeights = (shapeA.height / 2) + (shapeB.height / 2),
    colDir = null;
    // if the x and y vector are less than the half width or half height, they we must be inside the object, causing a collision
    if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
        // figures out on which side we are colliding (top, bottom, left, or right)
        var oX = hWidths - Math.abs(vX),
        oY = hHeights - Math.abs(vY);
        if (oX >= oY) {
            if (vY > 0) {
                colDir = "t";
                shapeA.y += oY;
            } else {
                colDir = "b";
                shapeA.y -= oY;
            }
        } else {
            if (vX > 0) {
                colDir = "l";
                shapeA.x += oX;
            } else {
                colDir = "r";
                shapeA.x -= oX;
            }
        }
    }
    return colDir;
}

// Check for player input
document.body.addEventListener("keydown", function (e) {
    keys[e.keyCode] = true;

});
document.body.addEventListener("keyup", function (e) {
    keys[e.keyCode] = false;
});
