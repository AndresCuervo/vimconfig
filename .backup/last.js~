var // Global variables!
width = 500,
height = 200,
bg = 255,
myHeight = height,
myWidth = width,
player = new Entity(5, 5, width/2, height - 15),
keys = [],
friction = 0.8,
gravity = 0.3,
boxes = [],
dir;

// dimensions
boxes.push({
    x: 0,
    y: 0,
    width: 10,
    height: height
});
boxes.push({
    x: 0,
    y: height - 2,
    width: width,
    height: 50
});
boxes.push({
    x: width - 10,
    y: 0,
    width: 50,
    height: height
});

boxes.push({
    x: 120,
    y: 10,
    width: 80,
    height: 80
});
boxes.push({
    x: 170,
    y: 50,
    width: 80,
    height: 80
});
boxes.push({
    x: 220,
    y: 100,
    width: 80,
    height: 80
});
boxes.push({
    x: 270,
    y: 150,
    width: 40,
    height: 40
});

function drawBoxes() {
    for (var i = 0; i < boxes.length; i++) {
        rect(boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);
        var dir = colCheck(player, boxes[i]);
        if (dir === "l" || dir === "r") {
            player.velocity.x = 0;
            player.jumping = false;
        } else if (dir === "b") {
            player.grounded = true;
            player.jumping = false;
        } else if (dir === "t") {
            player.velocity.y *= -1;
        }
    }
}

function Entity(width, height, startingX, startingY) {
    this.x = startingX;
    this.y = startingY;
    this.width = width;
    this.height = height;
    this.speed = 3.5;
    // this.velocity = createVector(0, 0);
    this.velocity = {x: 0, y: 0};
    this.velocity.x = 0;
    this.velocity.y = 0;
    this.jumping = false;
    this.grounded = false;
    this.color = {r: 200, g: 0, b: 0};
    this.update = function() {
        var jumpKey = (keys[32] || keys[38]),
        leftKey = keys[37];
        rightKey = keys[39];
        // check keys
        if (jumpKey) {
            if (!player.jumping && player.grounded) {
                player.jumping = true;
                player.grounded = false;
                player.velocity.y = -player.speed * 2;
            }
        }
        if (rightKey) {
            if (player.velocity.x < player.speed) {
                player.velocity.x++;
            }
        }
        if (leftKey) {
            if (player.velocity.x > -player.speed) {
                player.velocity.x--;
            }
        }

        player.velocity.x *= friction;
        player.velocity.y += gravity;

        player.grounded = false;
        drawBoxes();

        if(player.grounded){
            player.velocity.y = 0;
        }

        player.x += player.velocity.x;
        player.y += player.velocity.y;

        fill(200, 0, 0);
        rect( player.x, player.y, player.width, player.height);
        debug();
    }
}

var player2;
function setup() {
    createCanvas(myWidth, myHeight);
    background(bg);
    fill(0);
    strokeWeight(0);
    player2 = new Entity(10, 10, width/5, myHeight/2);
}

function draw() {
    background(bg);
    player2.update();
}

function colCheck(shapeA, shapeB) {
    // get the vectors to check against
    var vX = (shapeA.x + (shapeA.width / 2)) - (shapeB.x + (shapeB.width / 2)),
    vY = (shapeA.y + (shapeA.height / 2)) - (shapeB.y + (shapeB.height / 2)),
    // add the half widths and half heights of the objects
    hWidths = (shapeA.width / 2) + (shapeB.width / 2),
    hHeights = (shapeA.height / 2) + (shapeB.height / 2),
    colDir = null;

    // if the x and y vector are less than the half width or half height, they we must be inside the object, causing a collision
    if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
        // figures out on which side we are colliding (top, bottom, left, or right)
        var oX = hWidths - Math.abs(vX),
        oY = hHeights - Math.abs(vY);
        if (oX >= oY) {
            if (vY > 0) {
                colDir = "t";
                shapeA.y += oY;
            } else {
                colDir = "b";
                shapeA.y -= oY;
            }
        } else {
            if (vX > 0) {
                colDir = "l";
                shapeA.x += oX;
            } else {
                colDir = "r";
                shapeA.x -= oX;
            }
        }
    }
    return colDir;
}

document.body.addEventListener("keydown", function (e) {
    keys[e.keyCode] = true;
});

document.body.addEventListener("keyup", function (e) {
    keys[e.keyCode] = false;
});

function debug() {
    var textX = textY = 40,
    lineHeight = 15,
    messages = [];

    messages.push("player.x: " + player.x + " player.y: " + player.y);
    messages.push("player.velocity.x: " + player.velocity.x + " player.velocity.y: " + player.velocity.y);
    messages.push("player.jumping: " + player.jumping);
    messages.push("player.doubleJumping: " + player.doubleJumping);
    messages.push("player.grounded: " + player.grounded);

    for (var i  = 0; i < messages.length; i++) {
        fill(0);
        text(messages[i], textX, textY + lineHeight * i);
    }
}
