// (function () {
//     var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
//     window.requestAnimationFrame = requestAnimationFrame;
// })();

var // Global variables
// canvas = document.getElementById("defaultCanvas"),
// ctx = canvas.getContext("2d"),
bg = 100;
myWidth = 800,
myHeight = myWidth - 600, // Change to 600 for bigger canvas
player = new Entity(5, 5, myWidth/2, myHeight - 15),
keys = [],
friction = 0.8,
gravity = 0.3,
boxes = [];

function Entity(width, height, startingX, startingY) {
    this.x = startingX;
    this.y = startingY;
    this.width = width;
    this.height = height;
    this.speed = 3;
    // this.velocity = createVector(0, 0);
    this.velocity = {x: 0, y: 0}
    this.velX = 0;
    this.velY = 0;
    this.jumping = false;
    this.grounded = false;

    this.update = function() {
        // check keys
        if (keys[38] || keys[32]) {
            // up arrow or space
            if (!player2.jumping && player2.grounded) {
                player2.jumping = true;
                player2.grounded = false;
                player2.velocity.y = -player2.speed * 2;
            }
        }
        if (keys[39]) {
            // right arrow
            if (player2.velocity.x < player2.speed) {
                player2.velocity.x++;
            }
        }
        if (keys[37]) {
            // left arrow
            if (player2.velocity.x > -player2.speed) {
                player2.velocity.x--;
            }
        }

        player2.velocity.x *= friction;
        player2.velocity.y += gravity;

        player2.grounded = false;
        for (var i = 0; i < boxes.length; i++) {
            rect(boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);

            var dir = colCheck(player2, boxes[i]);

            if (dir === "l" || dir === "r") {
                player2.velocity.x = 0;
                player2.jumping = false;
            } else if (dir === "b") {
                player2.grounded = true;
                player2.jumping = false;
            } else if (dir === "t") {
                player2.velocity.y *= -1;
            }

        }

        if(player2.grounded){
            player2.velocity.y = 0;
        }

        player2.x += player2.velocity.x;
        player2.y += player2.velocity.y;

        debug();
        fill(this.color);
        rect(this.x, this.y, this.width, this.height);
    }
}

// dimensions
boxes.push({
    x: 0,
    y: 0,
    width: 10,
    height: myHeight
});
boxes.push({
    x: 0,
    y: myHeight - 5,
    width: myWidth,
    height: 50
});
boxes.push({
    x: myWidth - 10,
    y: 0,
    width: 50,
    height: myHeight
});

boxes.push({
    x: 120,
    y: 10,
    width: 80,
    height: 80
});
boxes.push({
    x: 170,
    y: 50,
    width: 80,
    height: 80
});
boxes.push({
    x: 220,
    y: 100,
    width: 80,
    height: 80
});
boxes.push({
    x: 270,
    y: 150,
    width: 40,
    height: 40
});

var player2 = new Entity(5, 5, myWidth/2, myHeight/2);
function setup() {
    createCanvas(myWidth, myHeight);
}

function draw() {
    background(bg);
    player.update();
}

// canvas.width = myWidth;
// canvas.height = myHeight;

// function update() {
//     // check keys
//     if (keys[38] || keys[32]) {
//         // up arrow or space
//         if (!player.jumping && player.grounded) {
//             player.jumping = true;
//             player.grounded = false;
//             player.velY = -player.speed * 2;
//         }
//     }
//     if (keys[39]) {
//         // right arrow
//         if (player.velX < player.speed) {
//             player.velX++;
//         }
//     }
//     if (keys[37]) {
//         // left arrow
//         if (player.velX > -player.speed) {
//             player.velX--;
//         }
//     }
//
//     player.velX *= friction;
//     player.velY += gravity;
//
//     ctx.clearRect(0, 0, myWidth, myHeight);
//     ctx.fillStyle = "black";
//     ctx.beginPath();
//
//     player.grounded = false;
//     for (var i = 0; i < boxes.length; i++) {
//         ctx.rect(boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);
//
//         var dir = colCheck(player, boxes[i]);
//
//         if (dir === "l" || dir === "r") {
//             player.velX = 0;
//             player.jumping = false;
//         } else if (dir === "b") {
//             player.grounded = true;
//             player.jumping = false;
//         } else if (dir === "t") {
//             player.velY *= -1;
//         }
//
//     }
//
//     if(player.grounded){
//         player.velY = 0;
//     }
//
//     player.x += player.velX;
//     player.y += player.velY;
//
//     ctx.fill();
//     ctx.fillStyle = "red";
//     ctx.fillRect(player.x, player.y, player.width, player.height);
//
//     requestAnimationFrame(update);
// }


function colCheck(shapeA, shapeB) {
    // get the vectors to check against
    var vX = (shapeA.x + (shapeA.width / 2)) - (shapeB.x + (shapeB.width / 2)),
    vY = (shapeA.y + (shapeA.height / 2)) - (shapeB.y + (shapeB.height / 2)),
    // add the half widths and half heights of the objects
    hWidths = (shapeA.width / 2) + (shapeB.width / 2),
    hHeights = (shapeA.height / 2) + (shapeB.height / 2),
    colDir = null;

    // if the x and y vector are less than the half width or half height, they we must be inside the object, causing a collision
    if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
        // figures out on which side we are colliding (top, bottom, left, or right)
        var oX = hWidths - Math.abs(vX),
        oY = hHeights - Math.abs(vY);
        if (oX >= oY) {
            if (vY > 0) {
                colDir = "t";
                shapeA.y += oY;
            } else {
                colDir = "b";
                shapeA.y -= oY;
            }
        } else {
            if (vX > 0) {
                colDir = "l";
                shapeA.x += oX;
            } else {
                colDir = "r";
                shapeA.x -= oX;
            }
        }
    }
    return colDir;
}

document.body.addEventListener("keydown", function (e) {
    keys[e.keyCode] = true;
});

document.body.addEventListener("keyup", function (e) {
    keys[e.keyCode] = false;
});
//
//
// window.addEventListener("load", function () {
//     update();
// });

function debug() {
    var textX = textY = 40,
    lineHeight = 15,
    messages = [];

    messages.push("player.x: " + player.x + " player.y: " + player.y);
    messages.push("player.velocity.x: " + player.velocity.x + " player.velocity.y: " + player.velocity.y);
    messages.push("player.jumping: " + player.jumping);
    messages.push("player.doubleJumping: " + player.doubleJumping);
    messages.push("player.grounded: " + player.grounded);

    for (var i  = 0; i < messages.length; i++) {
        fill(0);
        text(messages[i], textX, textY + lineHeight * i);
    }
}
